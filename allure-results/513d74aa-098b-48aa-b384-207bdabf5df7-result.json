{"name": "test_empty_credentials", "status": "failed", "statusDetails": {"message": "AssertionError: assert False", "trace": "self = <testcases.test_login.Test_001_Login object at 0x10311be10>\n\n    def test_empty_credentials(self):\n        \"\"\"Test login with empty credentials\"\"\"\n        self.logger.info(\"********** Testing Empty Credentials Login **********\")\n        self.lp = LoginPage(self.driver)\n        try:\n>           self.lp.login(\"\", \"\")\n\ntestcases/test_login.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageobjects/LoginPage.py:43: in login\n    self.enter_username(username)\npageobjects/LoginPage.py:19: in enter_username\n    WebDriverWait(self.driver, 10).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"e7cc916cb6b496422e68a1689673f401\")>\nmethod = <function presence_of_element_located.<locals>._predicate at 0x1033347c0>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       0   chromedriver                        0x0000000100fa2a54 cxxbridge1$str$ptr + 2803960\nE       1   chromedriver                        0x0000000100f9acf0 cxxbridge1$str$ptr + 2771860\nE       2   chromedriver                        0x0000000100ae6864 cxxbridge1$string$len + 93028\nE       3   chromedriver                        0x0000000100b2d410 cxxbridge1$string$len + 382736\nE       4   chromedriver                        0x0000000100b6e480 cxxbridge1$string$len + 649088\nE       5   chromedriver                        0x0000000100b217ec cxxbridge1$string$len + 334572\nE       6   chromedriver                        0x0000000100f67ccc cxxbridge1$str$ptr + 2562928\nE       7   chromedriver                        0x0000000100f6af98 cxxbridge1$str$ptr + 2575932\nE       8   chromedriver                        0x0000000100f482c4 cxxbridge1$str$ptr + 2433384\nE       9   chromedriver                        0x0000000100f6b810 cxxbridge1$str$ptr + 2578100\nE       10  chromedriver                        0x0000000100f392f0 cxxbridge1$str$ptr + 2371988\nE       11  chromedriver                        0x0000000100f8b57c cxxbridge1$str$ptr + 2708512\nE       12  chromedriver                        0x0000000100f8b708 cxxbridge1$str$ptr + 2708908\nE       13  chromedriver                        0x0000000100f9a93c cxxbridge1$str$ptr + 2770912\nE       14  libsystem_pthread.dylib             0x0000000190d59c0c _pthread_start + 136\nE       15  libsystem_pthread.dylib             0x0000000190d54b80 thread_start + 8\n\n/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testcases.test_login.Test_001_Login object at 0x10311be10>\n\n    def test_empty_credentials(self):\n        \"\"\"Test login with empty credentials\"\"\"\n        self.logger.info(\"********** Testing Empty Credentials Login **********\")\n        self.lp = LoginPage(self.driver)\n        try:\n            self.lp.login(\"\", \"\")\n            # Check if submit button is disabled or error messages are displayed\n            validation_messages = self.driver.find_elements(By.CLASS_NAME, \"validation-message\")\n            assert len(validation_messages) > 0\n            self.logger.info(\"Empty credentials validation test PASSED\")\n    \n        except Exception as e:\n            self._handle_test_failure(\"empty_credentials\", e)\n>           assert False\nE           assert False\n\ntestcases/test_login.py:81: AssertionError"}, "description": "Test login with empty credentials", "attachments": [{"name": "Failure Screenshot", "source": "476b77b4-3ea1-49df-809f-7682051edcb5-attachment.png", "type": "image/png"}, {"name": "log", "source": "f40c2885-07cf-4882-ba9f-9df68c3b1fbf-attachment.txt", "type": "text/plain"}], "start": 1746531265304, "stop": 1746531275783, "uuid": "5925d6fe-c11d-48a5-a34e-23641b8ef4b4", "historyId": "3be95ad5161ca5e2db6738104f4660ad", "testCaseId": "3be95ad5161ca5e2db6738104f4660ad", "fullName": "testcases.test_login.Test_001_Login#test_empty_credentials", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('setup')"}, {"name": "parentSuite", "value": "testcases"}, {"name": "suite", "value": "test_login"}, {"name": "subSuite", "value": "Test_001_Login"}, {"name": "host", "value": "viveks-MacBook-Air-2.local"}, {"name": "thread", "value": "18324-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.test_login"}]}